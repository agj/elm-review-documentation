[{"name":"Docs.ReadmeLinksPointToCurrentVersion","comment":"\n\n@docs rule\n\n","unions":[],"aliases":[],"values":[{"name":"rule","comment":" Reports links in the `README.md` that point to this project's package documentation on <https://package.elm-lang.org/>,\nwhere the version is set to `latest` or a different version than the current version of the package.\n\nðŸ”§ Running with `--fix` will automatically remove all the reported errors.\n\n    config =\n        [ Docs.ReadmeLinksPointToCurrentVersion.rule\n        ]\n\nThe problem with linking to `latest` is that if you release a new version later,\nthe users who read the README for the older version will be directed to a version\nwhere the module/function/section you pointed to may not exist anymore.\n\nThis rule ensures that you always use the correct version in all of your releases,\nand that you do not forget to update the links.\n\nThis rule provides automatic fixes, so you won't to do the tedious job of updating\nthe links yourself.\n\n**NOTE**: Just make sure to run tests between bumping the version of the package\nand publishing the package. Otherwise the link for a given version could link to a previous one.\n\n**NOTE**: A similar rule would be useful for links inside the modules. I'll be working on that too!\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template jfmengels/elm-review-documentation/example --rules Docs.ReadmeLinksPointToCurrentVersion\n```\n\n","type":"Review.Rule.Rule"}],"binops":[]},{"name":"Docs.ReviewLinksAndSections","comment":"\n\n@docs rule\n\n","unions":[],"aliases":[],"values":[{"name":"rule","comment":" Reports problems with links and sections in Elm projects.\n\n    config =\n        [ Docs.ReviewLinksAndSections.rule\n        ]\n\n\n## Fail\n\nLinks to missing modules or sections are reported.\n\n    {-| Link to [missing module](Unknown-Module).\n    -}\n    a =\n        1\n\n    {-| Link to [missing section](#unknown).\n    -}\n    a =\n        1\n\nIn packages, links that would appear in the public documentation and that link to sections not part of the public documentation are reported.\n\n    module Exposed exposing (a)\n\n    import Internal\n\n    {-| Link to [internal details](Internal#section).\n    -}\n    a =\n        1\n\nSections that would have the same generated id are reported,\nso that links don't inadvertently point to the wrong location.\n\n    module A exposing (element, section)\n\n    {-|\n\n\n    # Section\n\n    The above conflicts with the id generated\n    for the `section` value.\n\n    -}\n\n    element =\n        1\n\n    section =\n        1\n\n\n## Success\n\n    module Exposed exposing (a, b)\n\n    import Internal\n\n    {-| Link to [exposed b](#b).\n    -}\n    a =\n        1\n\n    b =\n        2\n\n\n## When (not) to enable this rule\n\nFor packages, this rule will be useful to prevent having dead links in the package documentation.\n\nFor applications, this rule will be useful if you have the habit of writing documentation the way you do in Elm packages,\nand want to prevent it from going out of date.\n\nThis rule will not be useful if your project is an application and no-one in the team has the habit of writing\npackage-like documentation.\n\n\n## Try it out\n\nYou can try this rule out by running the following command:\n\n```bash\nelm-review --template jfmengels/elm-review-documentation/example --rules Docs.ReviewLinksAndSections\n```\n\n\n## Thanks\n\nThanks to @lue-bird for helping out with this rule.\n\n","type":"Review.Rule.Rule"}],"binops":[]}]